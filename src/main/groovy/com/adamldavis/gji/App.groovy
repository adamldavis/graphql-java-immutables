/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.adamldavis.gji

import com.adamldavis.gji.generation.CodeGenerator
import com.adamldavis.gji.generation.JavaModelCodeGenerator
import com.adamldavis.gji.model.Root
import com.adamldavis.gji.processing.SchemaScriptBase
import org.codehaus.groovy.control.CompilerConfiguration

class App {

    final CodeGenerator codeGenerator = new JavaModelCodeGenerator()

    void process(File groovyFile) {
        def compilerConfiguration = new CompilerConfiguration()
        compilerConfiguration.setScriptBaseClass(SchemaScriptBase.class.name)
        GroovyShell shell = new GroovyShell(compilerConfiguration)
        Root root = shell.evaluate(groovyFile)
        // TODO read config
        codeGenerator.gen(new Config(), root)
    }

    static void main(String[] args) {
        File file = new File(args[0])
        println "File=$file"
        File groovyFile = new File(file.name + '.groovy')
        groovyFile.text = toGroovy(file.text)
        new App().process(groovyFile)
    }

    static String toGroovy(String schema) {
        schema.replace('!', '%1')
                .replace(':', '%')
                .replace('[', '')
                .replace(']', '+1')
                .replace('#', '//')
                .replaceAll('enum +', 'x0.enum.')
                .replaceAll('scalar +', 'x0.scalar.')
                .replaceAll('type +', 'x0.type.')
                .replaceAll('interface +', 'x0.interface.')
                .replaceAll(' +implements +', '.implements_') //x0.type.Foo.implements_Bar {
                .replaceAll('union +', 'x0.union.')
                .replaceAll('mutation +', 'x0.mutation.') + '\nprocess_graph_root'
    }
}
